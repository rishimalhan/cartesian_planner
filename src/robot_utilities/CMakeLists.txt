cmake_minimum_required(VERSION 2.8.3)
project(robot_utilities)

## Compile as C++11, supported in ROS Kinetic and newer
add_compile_options(-std=c++11 -O3)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  roslib
  rospy
)

# find_package(libnlopt REQUIRED COMPONENTS)
find_package(fcl REQUIRED)
find_package(CCD REQUIRED)

# find_package(libnabo REQUIRED COMPONENTS)
# find_package(libigl REQUIRED COMPONENTS)

find_package (orocos_kdl REQUIRED)
find_package(Boost 1.54.0 REQUIRED COMPONENTS system filesystem)

set(libigl_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../libigl)
set(libnlopt_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../libnlopt)
set(libnabo_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../libnabo)
set(fcl_INCLUDE_DIRS
  /usr/local/include)
set(FCL_LIB /usr/local/lib/libfcl.so)
message(WARNING "FCL INCLUDES LOCATED AT ${fcl_INCLUDE_DIRS}")
# set(FCL_INCLUDE_DIRS
# ${CMAKE_CURRENT_SOURCE_DIR}/../fcl/build/install/include)
# set(FCL_LIB ${CMAKE_CURRENT_SOURCE_DIR}/../fcl/build/install/lib/libfcl.a)
# message(WARNING "FCL INCLUDES LOCATED AT ${FCL_INCLUDE_DIRS}")

# Adding nlopt header file and linking dependancies 
include_directories(${libnlopt_SOURCE_DIR}/install/include)
link_directories(${libnlopt_SOURCE_DIR}/install/lib)
set(nlopt_ADDED_LIBS ${libnlopt_SOURCE_DIR}/install/lib/libnlopt.so)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

find_package(Eigen3)
if(NOT EIGEN3_FOUND)
  # Fallback to cmake_modules
  find_package(cmake_modules REQUIRED)
  find_package(Eigen REQUIRED)
  set(EIGEN3_INCLUDE_DIRS ${EIGEN_INCLUDE_DIRS})
  set(EIGEN3_LIBRARIES ${EIGEN_LIBRARIES})  # Not strictly necessary as Eigen is head only
  # Possibly map additional variables to the EIGEN3_ prefix.
else()
  set(EIGEN3_INCLUDE_DIRS ${EIGEN3_INCLUDE_DIR})
endif()

if (fcl_FOUND)
  message("fcl found!")
  message("${fcl_INCLUDE_DIRS}")
    include_directories(${fcl_INCLUDE_DIRS})
endif (fcl_FOUND) 

if (CCD_FOUND)
  message("CCD found!")
  message("${CCD_INCLUDE_DIRS}")
  include_directories(${CCD_INCLUDE_DIRS})
endif (CCD_FOUND)


# Use ${EIGEN3_...} variables in either case below

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
# )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
 INCLUDE_DIRS include
 LIBRARIES ${PROJECT_NAME}
#  CATKIN_DEPENDS geometry_msgs roscpp rospy sensor_msgs std_msgs
 DEPENDS EIGEN3 libnabo libigl
)

###########
## Build ##
###########


## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
include 
  ${catkin_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIRS}
  ${libnlopt_SOURCE_DIR}/install/include
  ${libnabo_SOURCE_DIR}/include/libnabo
  ${libigl_SOURCE_DIR}/include/libigl
  ${orocos_kdl_INCLUDE_DIRS}
  /opt/ros/kinetic/include/kdl
  /opt/ros/kinetic/include/urdf
  /opt/ros/kinetic/include
  ${fcl_INCLUDE_DIRS}
)

link_directories(${libnabo_SOURCE_DIR}/include/libnabo/build/libnabo.a
                ${libigl_SOURCE_DIR}/include/libigl/libigl.a
                
                /opt/ros/kinetic/lib
                /usr/local/lib)

# link_directories(${libnabo_SOURCE_DIR}/include/libnabo/build/libnabo.a)
# link_directories(${libigl_SOURCE_DIR}/include/libigl/libigl.a)

## Declare a C++ library
add_library(${PROJECT_NAME}
  src/RobotCollision.cpp
  src/STLtoPCL.cpp
  src/workspace_ball.cpp
  src/world_manager.cpp
  src/workspace_ball_manager.cpp
  src/ReadMesh.cpp
  src/SerialLink_Manipulator.cpp
  src/Data_Format_Mapping.cpp
  src/ikHandler.cpp
  src/file_rw.cpp
  src/transformation_utilities.cpp
)


set(robot_utilities_libs ${catkin_LIBRARIES}
                      ${FCL_LIB}
                      /opt/ros/kinetic/lib/liboctomath.a
                      /opt/ros/kinetic/lib/liboctomap.a
                      /usr/lib/x86_64-linux-gnu/libccd.so 
                      ${EIGEN3_LIBRARIES}
                      /usr/lib/x86_64-linux-gnu/libboost_iostreams.a
#                       /usr/lib/x86_64-linux-gnu/libboost_system.a
#                       /usr/lib/x86_64-linux-gnu/libboost_filesystem.a
                      /usr/lib/x86_64-linux-gnu/libutil.a
                      /usr/lib/x86_64-linux-gnu/libboost_thread.a
                      ${libnabo_SOURCE_DIR}/include/libnabo/build/libnabo.a gomp
                      orocos-kdl kdl_parser urdf
                      ${Boost_LIBRARIES}
                      ${nlopt_ADDED_LIBS}
                      )


target_link_libraries(${PROJECT_NAME} ${robot_utilities_libs})
# set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME rob_utils CXX_STANDARD 14)


add_executable(verify_analytical_ik src/verify_ik.cpp)
target_link_libraries(verify_analytical_ik ${robot_utilities_libs})

add_executable(test_urFunc src/test_urFunc.cpp)
target_link_libraries(test_urFunc ${robot_utilities_libs})

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/robot_utilities_node.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(${PROJECT_NAME}_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_robot_utilities.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)