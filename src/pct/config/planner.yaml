# Parameters for coverage path

# tool_name: "ferro_sander"
# tool_name: "sander_v1"
# tool_name: "flange"
# tool_name: "wld_gun"
# tool_name: "cam_sander_90"
tool_name: "cam_sander_0"

world_T_tool: [0,0,0,0,0,0]


# Fender Part
cvrg_path_parameters:
  {
    scan_ori: true, # this param will change the scanning orientation
    scan_normals: true, # this param will scan along the normals or flat z-plane

    # hatching angle properties, this will orient that path as needed
    # start_hatch_angle: !!python/object/apply:eval [3.14159/2.0], # in RADIANS
    # start_hatch_angle: -0.785, # in RADIANS
    start_hatch_angle: 0, # in RADIANS
    # double start_hatch_angle: 0.0 # in RADIANS

    ## THESE PARAMS WILL CHANGE THE SPACING OF THE POINTS OF THE PATH
    # this param skips the hatching lines, it needs to be tweaked based on the sanding tool diameter
    skip_hatching_lines: &skip_hatching_lines 0, # UNIT LESS (ROUGH ESTIMATE - 1 UNIT IS 1 centimeter)
     # this param skips points along the hatching direction - DEFAULT VALUE 0
    skip_points_hatching_lines: 0, # UNIT LESS (ROUGH ESTIMATE - 1 UNIT IS 1 centimeter)
    # this param skips points orthogonal to the hatching direction - DEFAULT VALUE 0
    skip_points_orthogonal_lines: *skip_hatching_lines, # UNIT LESS (ROUGH ESTIMATE - 1 UNIT IS 1 centimeter)
    
    #outer boundary box points to avoid. Basically shrinking the boundary by given values
    # Parameter not reachable by sequential IK
    # outer_boundary_subtraction_x_dir: 0.32, # IN METERS
    # outer_boundary_subtraction_y_dir: 0.03, # IN METERS

    outer_boundary_subtraction_x_dir: 0.05, # IN METERS
    outer_boundary_subtraction_y_dir: 0.03, # IN METERS
    
    # parameter to offset the complete path in Z direction from the surface
    z_height_offset_all_waypoints: 0, # IN METERS

    # Resolution at which initial points are spaced in x and y
    # path_gap: 0.01, #mm
    path_gap: 0.03, #mm
  }

cvrg_file_paths:
  {
    cvrg_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/waypoints.csv", # Path to save the path
    success_flags: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/success_flags.csv", # Path to save the path
    joint_states: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/joint_states.csv", # Path to save the trajectory
    # mesh_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/meshes/fender_binScaled.stl",
    # mesh_viz_path: "package://pct/data/meshes/fender_binScaled.stl",
    mesh_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/meshes/fender_bin.stl",
    mesh_viz_path: "package://pct/data/meshes/fender_bin.stl",

    # tool_stl_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/meshes/sander_v1.stl",
    # tool_stl_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/meshes/ferro_sander.stl",
    tool_stl_path: &tool_stl_path "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/meshes/wld_gun.stl",
    # tool_stl_coll_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/meshes/sander_v1/sander_v1_coll.stl",
    # tool_stl_coll_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/meshes/ferro_sander/ferro_sander_coll.stl"
    tool_stl_coll_path: *tool_stl_path
  }

cvrg_tf_param:
    {
        world_T_part: [ 1,-0.65,0,0,0, !!python/object/apply:eval [ 90*3.14/180 ] ], # x,y,z,rx,ry,rz
        # world_T_part: [ 2,-0.1,0,0,0, 3.14 ], # x,y,z,rx,ry,rz // Scaled mold
    }

viz_param:
    {
        rob_speed: 200
    }

path_find_mode: false
rob_config: [0,0,0,0,0,0]
sampling_res: 10 # Degrees







# # Boeing Part
# cvrg_path_parameters:
#   {
#     scan_ori: true, # this param will change the scanning orientation
#     scan_normals: true, # this param will scan along the normals or flat z-plane

#     # hatching angle properties, this will orient that path as needed
#     # start_hatch_angle: !!python/object/apply:eval [3.14159/2.0], # in RADIANS
#     # start_hatch_angle: -0.785, # in RADIANS
#     start_hatch_angle: 0, # in RADIANS
#     # double start_hatch_angle: 0.0 # in RADIANS

#     ## THESE PARAMS WILL CHANGE THE SPACING OF THE POINTS OF THE PATH
#     # this param skips the hatching lines, it needs to be tweaked based on the sanding tool diameter
#     skip_hatching_lines: &skip_hatching_lines 0, # UNIT LESS (ROUGH ESTIMATE - 1 UNIT IS 1 centimeter)
#      # this param skips points along the hatching direction - DEFAULT VALUE 0
#     skip_points_hatching_lines: 0, # UNIT LESS (ROUGH ESTIMATE - 1 UNIT IS 1 centimeter)
#     # this param skips points orthogonal to the hatching direction - DEFAULT VALUE 0
#     skip_points_orthogonal_lines: *skip_hatching_lines, # UNIT LESS (ROUGH ESTIMATE - 1 UNIT IS 1 centimeter)
    
#     #outer boundary box points to avoid. Basically shrinking the boundary by given values
#     # Parameter not reachable by sequential IK
#     # outer_boundary_subtraction_x_dir: 0.32, # IN METERS
#     # outer_boundary_subtraction_y_dir: 0.03, # IN METERS

#     outer_boundary_subtraction_x_dir: 0.1, # IN METERS
#     outer_boundary_subtraction_y_dir: 0.1, # IN METERS
    
#     # parameter to offset the complete path in Z direction from the surface
#     z_height_offset_all_waypoints: 0, # IN METERS

#     # Resolution at which initial points are spaced in x and y
#     # path_gap: 0.01, #mm
#     path_gap: 0.04, #mm
#   }

# cvrg_file_paths:
#   {
#     cvrg_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/waypoints.csv", # Path to save the path
#     success_flags: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/success_flags.csv", # Path to save the path
#     joint_states: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/joint_states.csv", # Path to save the trajectory
#     mesh_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/meshes/boeing_mold.stl",
#     mesh_viz_path: "package://pct/data/meshes/boeing_mold.stl",
#   }

# cvrg_tf_param:
#     {
#         world_T_part: [ 0.5,-0.65,0.0,0.0,0,0.0 ], # x,y,z,rx,ry,rz
#     }

# viz_param:
#     {
#         rob_speed: 10
#     }

# path_find_mode: false
# rob_config: [0,0,0,0,0,0]
# sampling_res: 10 # Degrees








# # Bath Tub Part
# cvrg_file_paths:
#   {
#     # path_file: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/bath_tub_task1.csv",
#     path_file: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/bath_tub_task2.csv",
#     # path_file: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/bath_tub_task3.csv",
#     # path_file: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/bath_tub_task4.csv",
#     cvrg_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/waypoints.csv", # Path to save the path
#     success_flags: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/success_flags.csv", # Path to save the path
#     joint_states: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/joint_states.csv", # Path to save the trajectory
#     mesh_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/meshes/bath_tub.stl",
#     mesh_viz_path: "package://pct/data/meshes/bath_tub.stl",
#   }

# cvrg_tf_param:
#     {
#         # world_T_part: [1,0,0,0,0,1.57], # x,y,z,rx,ry,rz xyzbxbybz
#         world_T_part: [1,0,0,0,0,-1.57], # x,y,z,rx,ry,rz Task1
#         # world_T_part: [1.1,0,0,0,0,1.57], # x,y,z,rx,ry,rz Task4
#     }

# viz_param:
#     {
#         rob_speed: 10
#     }

# path_find_mode: false
# rob_config: [0,0,0,0,0,0]
# sampling_res: 20 # Degrees











# # Kane Part
# cvrg_file_paths:
#   {
#     # path_file: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/path.csv",
#     path_file: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/kane1_new_origin_sideA.csv",
#     # path_file: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/kane1_new_origin_sideB.csv",
#     cvrg_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/waypoints.csv",
#     success_flags: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/success_flags.csv", # Path to save the path
#     joint_states: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/joint_states.csv", # Path to save the trajectory
#     mesh_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/meshes/fender_bin.stl",
#     mesh_viz_path: "package://pct/data/meshes/fender_bin.stl",
#     tool_stl_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/meshes/ferro_sander.stl",
#   }

# cvrg_tf_param:
#     {
#         # kmp = [0.693000,-0.370000,-0.337000,0.000000,0.000000,0.000000,1.000000] # sideA
#         # kmp = [1.134,-0.37,-0.337,0,0,-0.98481,0.17365] # sideB - better
#         world_T_part: [ 0.693000,-0.370000,-0.250000,0.000000,0.000000,0.000000 ], # x,y,z,rx,ry,rz
#     }

# viz_param:
#     {
#         rob_speed: 10
#     }
# rob_config: [0,0,0,0,0,0]
# sampling_res: 20 # Degrees








# # Random Path
# cvrg_file_paths:
#   {
#     path_file: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/xyzbxbybz.csv",
#     cvrg_path: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/waypoints.csv",
#     success_flags: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/success_flags.csv", # Path to save the path
#     joint_states: "/home/rmalhan/Work/USC/Modules/cartesian_planning/cartesian_planner/src/pct/data/csv/joint_states.csv", # Path to save the trajectory
#   }

# cvrg_tf_param:
#     {
#         # world_T_part: [ 1.2,-0.25,0.3,0,0,0 ], # x,y,z,rx,ry,rz
#         world_T_part: [ 0,0,0,0,0,0 ], # x,y,z,rx,ry,rz
#     }

# viz_param:
#     {
#         rob_speed: 10
#     }
# rob_config: [0,0,0,0,0,0]
# sampling_res: 20 # Degrees